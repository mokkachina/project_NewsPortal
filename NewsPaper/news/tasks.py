import warnings
from celery import shared_task
import time
import logging
from django_apscheduler.jobstores import DjangoJobStore
from django.core.management.base import BaseCommand
from django.core.mail import send_mail
from apscheduler.schedulers.background import BackgroundScheduler
from django.utils import timezone
from django.urls import reverse
from news.models import Post, Category, Subscription
import datetime
from datetime import timedelta
from django.conf import settings
from django.core.mail import EmailMultiAlternatives
from django.dispatch import receiver
from django.db.models.signals import m2m_changed
from django.template.loader import render_to_string
from zoneinfo import ZoneInfo


logger = logging.getLogger(__name__)

logger = logging.getLogger('news.tasks')

# –ü–æ–¥–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è pytz
warnings.filterwarnings(
    "ignore",
    category=DeprecationWarning,
    module="apscheduler.util"
)

@shared_task
def send_notifications(preview, pk, title, subscribers):
    html_content = render_to_string(
        'post_create_email.html',
        {
            'text':  preview,
            'link': f'{settings.SITE_URL}/news/{pk}',
        }
    )
    msg = EmailMultiAlternatives(
        subject=title,
        body="",
        from_email=settings.DEFAULT_FROM_EMAIL,
        to=subscribers,

     )
    msg.attach_alternative(html_content, 'text/html')
    msg.send()



@shared_task
def my_work():

    today = datetime.datetime.now()
    last_week = today - datetime.timedelta(days=7)
    posts = Post.objects.filter(dataCreation__gte=last_week)
    # print(posts)
    categories = set(posts.values_list('postCategory__name', flat=True))

    subscribers = set(Category.objects.filter(name__in=categories).values_list('subscribers__email', flat=True))

    html_content = render_to_string(
        'daily_post.html',
        {
            'link': settings.SITE_URL,
            'posts': posts,
        }
    )
    msg = EmailMultiAlternatives(
        subject='–°—Ç–∞—Ç—å–∏ –∑–∞ –Ω–µ–¥–µ–ª—é',
        body="",
        from_email=settings.DEFAULT_FROM_EMAIL,
        to=subscribers,

    )
    msg.attach_alternative(html_content, 'text/html')
    msg.send()


warnings.filterwarnings(
    action="ignore",
    category=UserWarning,
    module="apscheduler.util"
)

warnings.filterwarnings(
    "ignore",
    category=DeprecationWarning,
    module="apscheduler.util"
)




def send_weekly_digest():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏...")

        moscow_tz = ZoneInfo('Europe/Moscow')
        now = timezone.now().astimezone(moscow_tz)
        week_ago = now - timedelta(days=7)

        logger.debug(f"–ü–µ—Ä–∏–æ–¥ —Ä–∞—Å—Å—ã–ª–∫–∏: —Å {week_ago} –ø–æ {now}")

        for category in Category.objects.all():
            logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category.name}")

            new_posts = Post.objects.filter(
                postCategory=category,
                dataCreation__gte=week_ago
            ).order_by('-dataCreation')

            if not new_posts.exists():
                logger.debug(f"–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category.name}")
                continue

            subscriptions = Subscription.objects.filter(
                category=category,
                subscribed=True
            ).select_related('user')

            if not subscriptions.exists():
                logger.debug(f"–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category.name}")
                continue

            subject = f'üì∞ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç: {category.name}'
            message_lines = [
                f'–ù–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏ –∑–∞ –Ω–µ–¥–µ–ª—é ({week_ago.strftime("%d.%m")}-{now.strftime("%d.%m.%Y")}):',
                ''
            ]

            for post in new_posts:
                post_time = post.dataCreation.astimezone(moscow_tz)
                message_lines.extend([
                    f"‚Üí {post.title}",
                    f"  üìÖ {post_time.strftime('%d.%m %H:%M')}",
                    f"  üîó http://127.0.0.1:8000{reverse('new_detail', args=[post.id])}",
                    ''
                ])

            message = '\n'.join(message_lines)
            logger.debug(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ –ø–∏—Å—å–º–æ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category.name}")

            for subscription in subscriptions:
                try:
                    send_mail(
                        subject=subject,
                        message=message,
                        from_email=settings.DEFAULT_FROM_EMAIL,
                        recipient_list=[subscription.user.email],
                        fail_silently=False,
                    )
                    logger.info(f"–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {subscription.user.email}")
                except Exception as e:
                    logger.error(
                        f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è {subscription.user.email}: {str(e)}",
                        exc_info=True
                    )

        logger.info("–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    except Exception as e:
        logger.error(
            f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ send_weekly_digest: {str(e)}",
            exc_info=True
        )
        raise


def start_scheduler():
    """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
    try:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")

        scheduler = BackgroundScheduler(timezone='Europe/Moscow')
        scheduler.add_jobstore(DjangoJobStore(), 'default')

        scheduler.add_job(
            send_weekly_digest,
            trigger='cron',
            day_of_week='fri',
            hour=18,
            minute=0,
            id='weekly_digest',
            replace_existing=True,
        )

        scheduler.start()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        return scheduler

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {str(e)}",
            exc_info=True
        )
        raise


class Command(BaseCommand):
    """Management-–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    help = '–ó–∞–ø—É—Å–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π'

    def handle(self, *args, **options):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥
        cmd_logger = logging.getLogger('news.management')
        cmd_logger.info("–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã —Ä–∞—Å—Å—ã–ª–∫–∏")

        try:
            self.stdout.write(self.style.SUCCESS('–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏...'))

            scheduler = start_scheduler()
            cmd_logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ –∑–∞–ø—É—â–µ–Ω")

            self.stdout.write(
                self.style.SUCCESS('‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–∞ –∫–∞–∂–¥—É—é –ø—è—Ç–Ω–∏—Ü—É –≤ 18:00 (–ú—Å–∫)')
            )
            self.stdout.write('–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C')

            # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–Ω—Å–æ–ª–∏
            while True:
                pass

        except KeyboardInterrupt:
            if 'scheduler' in locals():
                scheduler.shutdown()
            cmd_logger.info("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            self.stdout.write(self.style.SUCCESS('\n–†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'))
        except Exception as e:
            cmd_logger.error(
                f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {str(e)}",
                exc_info=True
            )
            self.stdout.write(self.style.ERROR(f'–û—à–∏–±–∫–∞: {e}'))